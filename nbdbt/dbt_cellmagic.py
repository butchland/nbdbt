# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_dbt_cellmagic.ipynb (unless otherwise specified).

__all__ = ['write_sql', 'compile_model', 'exec_faldbt_ref', 'write_dbt']

# Internal Cell

import IPython
from IPython.core import magic_arguments
from IPython.core.magic import register_cell_magic, register_line_magic

# Internal Cell
from pathlib import Path

# Internal Cell
from dbt.main import parse_args, adapter_management
from dbt.task.compile import CompileTask
import dbt.flags
import dbt.tracking

# Internal Cell
dbt.tracking.active_user = dbt.tracking.User(None)
dbt.flags.INDIRECT_SELECTION = "eager"
dbt.flags.WRITE_JSON = True

# Internal Cell

from fal import FalDbt
import faldbt.lib as fallib

# Internal Cell

import pandas as pd

# Cell
def write_sql(sql: str, file: str, project_dir: str):
    path = Path(project_dir) / file
    with open(path, "w") as f:
        f.write(sql)

# Cell
def compile_model(project: str, model: str):
    parsed = parse_args(["compile", "--select", model, "--project-dir", project])
    with adapter_management():
        task = CompileTask.from_args(args=parsed)
        op_result = task.run()
        return op_result

# Cell
def exec_faldbt_ref(project, op_result, profiles="~/.dbt"):
    """execute sql and return df"""

    sql = op_result.results[0].node.compiled_sql

    faldbt = FalDbt(profiles_dir=profiles, project_dir=project)
    profile_target = faldbt._profile_target
    # adapter_response, result
    _, result = fallib._execute_sql(project, profiles, sql, profile_target)
    df_result = pd.DataFrame.from_records(
        result.table.rows, columns=result.table.column_names, coerce_float=True
    )
    return df_result

# Cell
@magic_arguments.magic_arguments()
@magic_arguments.argument(
    "-a",
    "--assign",
    type=str,
    default=None,
    help=("If provided, save the output to this variable instead of displaying it."),
)
@magic_arguments.argument(
    "-p",
    "--project",
    type=str,
    help=("dbt project directory"),
)
@magic_arguments.argument(
    "-n",
    "--notebook",
    type=str,
    default=None,
    help=("notebook source file"),
)
@magic_arguments.argument(
    "file",
    type=str,
    help=("file path to write to"),
)
@register_cell_magic("dbt")
def write_dbt(line, cell):
    try:
        from dbt.main import parse_args
    except ImportError:
        return "'dbt-core' not installed. Did you run 'pip install dbt-core'?"
    line_args = magic_arguments.parse_argstring(write_dbt, line)
    # print(f"assign={line_args.assign}")
    # print(f"project={line_args.project}")
    # print(f"notebook={line_args.notebook}")
    # print(f"file={line_args.file}")

    if not line_args.notebook:
        contents = "-- AUTOGENERATED! DO NOT EDIT!\n" + cell
    else:
        contents = (
            f"-- AUTOGENERATED! DO NOT EDIT! File to edit: {line_args.notebook} (unless otherwise specified).\n"
            + cell
        )
    write_sql(contents, line_args.file, line_args.project)
    op_result = compile_model(line_args.project, line_args.file)
    results = exec_faldbt_ref(line_args.project, op_result)
    if line_args.assign:
        IPython.get_ipython().push({line_args.assign: results})
        return 0
    return results